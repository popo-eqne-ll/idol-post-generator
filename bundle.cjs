const fs = require('fs');
const path = require('path');

const buildDir = path.resolve(__dirname, 'dist');
const htmlFilePath = path.resolve(buildDir, 'index.html');

console.log('Starting bundle.cjs script...');
console.log(`Build directory: ${buildDir}`);
console.log(`HTML file path: ${htmlFilePath}`);

fs.readFile(htmlFilePath, 'utf8', (err, htmlData) => {
    if (err) {
        console.error('Error reading index.html:', err);
        return;
    }
    console.log('index.html read successfully.');

    // Find JS and CSS files generated by Vite
    // Updated regex to be more flexible with attributes and paths
    const jsFileMatch = htmlData.match(/<script(?:[^>]*)src="\/assets\/(.+?\.js)"(?:[^>]*)><\/script>/);
    const cssFileMatch = htmlData.match(/<link(?:[^>]*)href="\/assets\/(.+?\.css)"(?:[^>]*)>/);

    let newHtmlData = htmlData;

    if (jsFileMatch && jsFileMatch[1]) {
        const jsFileName = jsFileMatch[1];
        const jsFilePath = path.resolve(buildDir, 'assets', jsFileName);
        console.log(`Found JS file: ${jsFileName}`);
        try {
            let jsContent = fs.readFileSync(jsFilePath, 'utf8');
            // Escape <\/script> to prevent premature closing of the script tag
            jsContent = jsContent.replace(/<\/script>/g, '<\/script>');
            newHtmlData = newHtmlData.replace(jsFileMatch[0], `<script type="module">\n${jsContent}\n<\/script>`);
            fs.unlinkSync(jsFilePath); // Clean up the separate JS file
            console.log(`JS file ${jsFileName} inlined and deleted.`);
        } catch (readErr) {
            console.error(`Error reading or inlining JS file ${jsFileName}:`, readErr);
        }
    } else {
        console.log('No JS file found to inline.');
    }

    if (cssFileMatch && cssFileMatch[1]) {
        const cssFileName = cssFileMatch[1];
        const cssFilePath = path.resolve(buildDir, 'assets', cssFileName);
        console.log(`Found CSS file: ${cssFileName}`);
        try {
            const cssContent = fs.readFileSync(cssFilePath, 'utf8');
            newHtmlData = newHtmlData.replace(cssFileMatch[0], `<style>\n${cssContent}\n<\/style>`);
            fs.unlinkSync(cssFilePath); // Clean up the separate CSS file
            console.log(`CSS file ${cssFileName} inlined and deleted.`);
        } catch (readErr) {
            console.error(`Error reading or inlining CSS file ${cssFileName}:`, readErr);
        }
    } else {
        console.log('No CSS file found to inline.');
    }

    // Write the new single HTML file
    fs.writeFile(htmlFilePath, newHtmlData, 'utf8', (err) => {
        if (err) {
            console.error('Error writing single index.html:', err);
            return;
        }
        console.log('Successfully bundled into a single index.html');

        // Remove the assets directory if it's empty after moving files
        const assetsDirPath = path.resolve(buildDir, 'assets');
        fs.readdir(assetsDirPath, (readDirErr, files) => {
            if (readDirErr) {
                console.log('Assets directory not found or empty.');
                return;
            }
            if (files.length === 0) {
                fs.rm(assetsDirPath, { recursive: true, force: true }, (rmErr) => {
                    if (rmErr) {
                        console.error('Error removing assets directory:', rmErr);
                    }
                    console.log('Assets directory removed.');
                });
            } else {
                console.log('Assets directory not empty, skipping removal.');
            }
        });
    });
});