const fs = require('fs');
const path = require('path');

const buildDir = path.resolve(__dirname, 'dist');
const htmlFilePath = path.resolve(buildDir, 'index.html');

fs.readFile(htmlFilePath, 'utf8', (err, htmlData) => {
    if (err) {
        console.error('Error reading index.html:', err);
        return;
    }

    // Find JS and CSS files generated by Vite
    const jsFileMatch = htmlData.match(/<script type="module" crossorigin src="\/assets\/(.+?\.js)"><\/script>/);
    const cssFileMatch = htmlData.match(/<link rel="stylesheet" href="\/assets\/(.+?\.css)">/);

    let newHtmlData = htmlData;

    if (jsFileMatch && jsFileMatch[1]) {
        const jsFileName = jsFileMatch[1];
        const jsFilePath = path.resolve(buildDir, 'assets', jsFileName);
        try {
            const jsContent = fs.readFileSync(jsFilePath, 'utf8');
            newHtmlData = newHtmlData.replace(jsFileMatch[0], `<script type="module">\n${jsContent}\n<\/script>`);
            fs.unlinkSync(jsFilePath); // Clean up the separate JS file
        } catch (readErr) {
            console.error(`Error reading JS file ${jsFileName}:`, readErr);
        }
    }

    if (cssFileMatch && cssFileMatch[1]) {
        const cssFileName = cssFileMatch[1];
        const cssFilePath = path.resolve(buildDir, 'assets', cssFileName);
        try {
            const cssContent = fs.readFileSync(cssFilePath, 'utf8');
            newHtmlData = newHtmlData.replace(cssFileMatch[0], `<style>\n${cssContent}\n<\/style>`);
            fs.unlinkSync(cssFilePath); // Clean up the separate CSS file
        } catch (readErr) {
            console.error(`Error reading CSS file ${cssFileName}:`, readErr);
        }
    }

    // Write the new single HTML file
    fs.writeFile(htmlFilePath, newHtmlData, 'utf8', (err) => {
        if (err) {
            console.error('Error writing single index.html:', err);
            return;
        }
        console.log('Successfully bundled into a single index.html');

        // Remove the assets directory if it's empty after moving files
        const assetsDirPath = path.resolve(buildDir, 'assets');
        fs.readdir(assetsDirPath, (readDirErr, files) => {
            if (readDirErr) {
                // Directory might not exist or other error
                return;
            }
            if (files.length === 0) {
                fs.rm(assetsDirPath, { recursive: true, force: true }, (rmErr) => {
                    if (rmErr) {
                        console.error('Error removing assets directory:', rmErr);
                    }
                });
            }
        });
    });
});
